#!/usr/bin/env stap

probe begin {
  printf("iniciando...\n")
}

### As funções de spinlock precisam de trace_mark



probe kernel.mark("spin_lock_irqsave_acquired") {
  printf("spin_lock_irqsave %d\n", tid())
}

# probe kernel.function("spin_unlock_irqrestore") {
#   printf("spin_unlock_irqrestore %d\n", tid())
# }

probe kernel.mark("spin_lock_irq_acquired") {
  printf("spin_lock_irq %d\n", tid())
}

# probe kernel.function("spin_unlock_irq") {
#   printf("spin_unlock_irq %d\n", tid())
# }

probe kernel.function("down") {
  if(pid() == target()) {
    printf("down %d count %d name %s execname %s", tid(), user_int($sem->count), kernel_string($sem->lock->dep_map->name), execname())
  }
}

probe kernel.function("down_interruptible") {
  if(pid() == target()) {
    printf("down_interruptible %d count %d name %s execname %s", tid(), user_int($sem->count), kernel_string($sem->lock->dep_map->name), execname())
  }
}

probe kernel.function("down_trylock") {
  if(pid() == target()) {
    printf("down_trylock %d count %d name %s execname %s", tid(), user_int($sem->count), kernel_string($sem->lock->dep_map->name), execname())
  }
}

probe kernel.function("down_killable") {
  if(pid() == target()) {
    printf("down_killable %d count %d name %s execname %s", tid(), user_int($sem->count), kernel_string($sem->lock->dep_map->name), execname())
  }
}

probe kernel.function("down_timeout") {
  if(pid() == target()) {
    printf("down_timeout %d count %d name %s execname %s", tid(), user_int($sem->count), kernel_string($sem->lock->dep_map->name), execname())
  }
}

probe kernel.function("up") {
  if(pid() == target()) {
    printf("up %d count %d name %s execname %s", tid(), user_int($sem->count), kernel_string($sem->lock->dep_map->name), execname())
  }
}

probe kernel.mark("read_lock_acquired") {
  printf("read_lock %d %s\n", tid(), execname())
}

# probe kernel.function("read_unlock") {
# printf("read_unlock %d %s\n", tid(), execname())
# }

# probe kernel.function("write_lock") {
# printf("write_lock %d %s\n", tid(), execname())
# }

# probe kernel.function("write_unlock") {
# printf("write_unlock %d %s\n", tid(), execname())
# }

probe kernel.function("down_read") {
  if(pid() == target()) {
    printf("down_read %d %s %s\n", tid(), kernel_string($sem->dep_map->name), execname())
  }
}

probe kernel.function("down_write") {
  if(pid() == target()) {
    printf("down_write %d %s %s\n", tid(), kernel_string($sem->dep_map->name), execname())
  }
}

probe kernel.function("up_read") {
  if(pid() == target()) {
    printf("up_read %d %s %s\n", tid(), kernel_string($sem->dep_map->name), execname())
  }
}

probe kernel.function("up_write") {
  if(pid() == target()) {
    printf("up_write %d %s %s\n", tid(), kernel_string($sem->dep_map->name), execname())
  }
}

# probe kernel.function("br_read_lock") {
# printf("br_read_lock %d %s\n", tid(), execname())
# }

# probe kernel.function("br_read_unlock") {
# printf("br_read_unlock %d %s\n", tid(), execname())
# }

probe kernel.function("lock_kernel") {
  if(pid() == target()) {
    printf("lock_kernel %d %s\n", tid(), execname())
  }
}

probe kernel.function("unlock_kernel") {
  if(pid() == target()) {
    printf("unlock_kernel %d %s\n", tid(), execname())
  }
}
