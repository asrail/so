#!/usr/bin/env stap

function parent:string (file) {
  directory = ""
  mountpoint = ""
  dentry = @cast(file, "file")->f_path->dentry->d_parent
  parent = kernel_string(@cast(dentry, "dentry")->d_name->name)
  mnt = @cast(file, "file")->f_path->mnt
  root = kernel_string(@cast(mnt, "vfsmount")->mnt_root->d_name->name)
  if (parent == root)
    directory = parent
  while (mountpoint != root) {
    while (parent != root) {
      directory = "/" . parent . directory
      dentry = @cast(dentry, "dentry")->d_parent
      parent = kernel_string(@cast(dentry, "dentry")->d_name->name)
    }
    dentry = @cast(mnt, "vfsmount")->mnt_mountpoint
    parent = kernel_string(@cast(mnt, "vfsmount")->mnt_mountpoint->d_name->name)
    mountpoint = parent
    mnt = @cast(mnt, "vfsmount")->mnt_parent
  }
  return directory
}

probe vfs.write.return {
  if ((pid() == target()) && (ret > 0) && (devname != "N/A")) {
    printf("WRITE: %s - %s - %s\n", kernel_string(@cast($file->f_path->mnt, "vfsmount")->mnt_devname), parent($file), kernel_string($file->f_path->dentry->d_name->name))
  }
}


probe vfs.read.return {
  if ((pid() == target()) && (ret > 0) && (devname != "N/A")) {
    printf("READ: %s - %s - %s\n", kernel_string(@cast($file->f_path->mnt, "vfsmount")->mnt_devname), parent($file), kernel_string($file->f_path->dentry->d_name->name))
  }
}
